# 📄 .github/workflows/deploy.yml
name: Deploy Production Server

on:
  push:
    branches: [ "master" ]

permissions:
  contents: read

jobs:
  deploy:
    if: github.repository == 'Team-Promesa/spring-vote-21st'
    runs-on: ubuntu-latest

    steps:
      # STEP 1. Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # STEP 2. Set up JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # STEP 3. Build JAR (skip tests)
      - name: Build with Gradle (skip tests)
        run: ./gradlew bootJar -x test

      # STEP 4. Docker login + build + push
      - name: Build and Push Docker Image
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -t ${{ secrets.DOCKER_USERNAME }}/vote .
          docker push ${{ secrets.DOCKER_USERNAME }}/vote

      # STEP 5. SSH to EC2 and deploy
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ubuntu
          key: ${{ secrets.KEY }}
          script: |
            cd /home/ubuntu/

            # .env 파일 생성
            echo "${{ secrets.ENV_VARS }}" | sudo tee .env > /dev/null

            # DOCKER_COMPOSE 멀티라인 YAML 줄바꿈 보존 방식으로 생성
            cat <<EOF | sudo tee docker-compose.yml > /dev/null
${{ vars.DOCKER_COMPOSE }}
EOF

            # 도커 권한 및 이미지 정리
            sudo chmod 666 /var/run/docker.sock
            sudo docker rm -f $(docker ps -qa) || true
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/vote

            # 컨테이너 실행 및 확인
            sudo docker-compose -f docker-compose.yml --env-file .env up -d || exit 1
            sudo docker ps -a
